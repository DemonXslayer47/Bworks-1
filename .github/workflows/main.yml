name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    tags:
      - 'v*..' # standard version name (e.g., v1.0.0)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          
      - name: Build project
        run: npm run build
          
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests
        run: npm test
        
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lintian

      - name: Lint project
        run: |
          lintian
          
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
      - test

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Deploy project
        run: |
          echo "Nothing to deploy"

  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        uses: actions/javascript-action@v1
        with:
          script: |
            const github = require('@actions/github');
            async function createRelease() {
              try {
                const token = process.env.GITHUB_TOKEN;
                const octokit = github.getOctokit(token);
                const tag = await octokit.rest.repos.getLatestRelease({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                 });

              const release = await octokit.rest.repos.createRelease({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                tag_name: tag.data.tag_name,
                name: `Release ${tag.data.tag_name}`,
                body: `This is the release ${tag.data.tag_name}`,
                draft: false,
                prerelease: false,
              });

              console.log(`Release created with ID: ${release.data.id}`);
            } catch (error) {
              console.error(error);
            }
            }
          

            createRelease();
            
